import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;


public class TestMonth {
	
	private Month _month;
	private Year _yearLeap;
	private Year _year;
	private int[] sizeIndex = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
	private int[] sizeIndexLeap = { 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
	
	@Before
	public void initYear(){
		_yearLeap = new Year(2016);
		_year = new Year(2015);
	}
	
	@Rule
	public final ExpectedException expectedException = ExpectedException.none();
		
	
	@Test
	public void testGetYear(){
		_year = new Year(10);
		org.junit.Assert.assertEquals(10,_year.getYear());
	}
	
	@Test
	public void testGetMonthSize(){
		for(int i=1;i<=12;i++){
			_month = new Month(i,_year);
			org.junit.Assert.assertEquals(sizeIndex[i-1],_month.getMonthSize());
		}
		for(int i=1;i<=12;i++){
			_month = new Month(i,_yearLeap);
			org.junit.Assert.assertEquals(sizeIndexLeap[i-1],_month.getMonthSize());
		}
		
	}
	
	@Test
	public void testIncrement(){
		_month = new Month(1,_year);
		org.junit.Assert.assertTrue(_month.increment());
		_month = new Month(12,_year);
		org.junit.Assert.assertFalse(_month.increment());
	}
	
	@Test
	public void testIsValid(){
		
		try{
			Year _yearInvalid = new Year(0);
			_month = new Month(0,_yearInvalid);
			org.junit.Assert.assertFalse(_month.isValid());
		}catch(IllegalArgumentException ex){
			org.junit.Assert.assertNull(_month);
		}
		try{
			Year _yearInvalid = new Year(0);
			_month = new Month(1,_yearInvalid);
			org.junit.Assert.assertFalse(_month.isValid());
		}catch(IllegalArgumentException ex){
			org.junit.Assert.assertNull(_month);
		}
		try{
			Year _yearInvalid = new Year(0);
			_month = new Month(5,_yearInvalid);
			org.junit.Assert.assertFalse(_month.isValid());
		}catch(IllegalArgumentException ex){
			org.junit.Assert.assertNull(_month);
		}
		try{
			Year _yearInvalid = new Year(0);
			_month = new Month(12,_yearInvalid);
			org.junit.Assert.assertFalse(_month.isValid());
		}catch(IllegalArgumentException ex){
			org.junit.Assert.assertNull(_month);
		}
		try{
			Year _yearInvalid = new Year(0);
			_month = new Month(13,_yearInvalid);
			org.junit.Assert.assertFalse(_month.isValid());
		}catch(IllegalArgumentException ex){
			org.junit.Assert.assertNull(_month);
		}
		
		try{
			_month = new Month(0,_year);
			org.junit.Assert.assertFalse(_month.isValid());
		}catch(IllegalArgumentException ex){
			org.junit.Assert.assertNull(_month);
		}
		try{
			_month = new Month(13,_year);
			org.junit.Assert.assertFalse(_month.isValid());
		}catch(IllegalArgumentException ex){
			org.junit.Assert.assertNull(_month);
		}
		
		_month = new Month(1,_year);
		org.junit.Assert.assertTrue(_month.isValid());
		_month = new Month(5,_year);
		org.junit.Assert.assertTrue(_month.isValid());
		_month = new Month(12,_year);
		org.junit.Assert.assertTrue(_month.isValid());
	}
	
	@Test
	public void testEquals(){
		_month = new Month(1,_yearLeap);
		org.junit.Assert.assertFalse(_month.equals(new Month(1,_year)));
		org.junit.Assert.assertFalse(_month.equals(new Month(2,_year)));
		org.junit.Assert.assertFalse(_month.equals(new Month(2,_yearLeap)));
		org.junit.Assert.assertTrue(_month.equals(new Month(1,_yearLeap)));
	}
}
